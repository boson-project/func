name: CI

on:
  push:
    branches:
      - "main"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      # Checkout and test
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Determine platform binaries
        id: pkger-binaries
        uses: actions/github-script@v2
        with:
          result-encoding: string
          script: |
            let platform, binary;
            switch ('${{matrix.os}}') {
              case 'ubuntu-latest':
                platform = 'Linux_x86'
                binary = 'pkger'
                break
              case 'windows-latest':
                platform = 'Windows_x86'
                binary = 'pkger.exe'
                break
              case 'macos-latest':
                platform = 'Darwin_x86'
                binary = 'pkger'
                break
            }
            core.setOutput('platform', platform)
            core.setOutput('binary', binary)
      - name: Determine download URL for latest pkger
        id: pkger-download-url
        uses: actions/github-script@v2
        with:
          result-encoding: string
          script: |
            let platform = "${{ steps.pkger-binaries.outputs.platform }}"
            let binary = "${{ steps.pkger-binaries.outputs.binary }}"
            core.info('PLATFORM: ' + platform)
            core.info('BINARY: ' + binary)
            return github.repos.getReleaseByTag({
                owner: "markbates",
                repo: "pkger",
                tag: "v0.17.1"
            }).then(result => {
                return result.data.assets
                  .filter(a => a.name.includes(platform))
                  .map(a => a.browser_download_url)[0];
            })
      - name: Install pkger
        run: |
          curl -s -L -o pkger.tgz ${{ steps.pkger-download-url.outputs.result }}
          tar xvzf pkger.tgz
      - name: Test
        run:  make test
        env:
          PKGER: "./${{ steps.pkger-binaries.outputs.binary }}"
      
      # Create a release, or update the release PR
      - uses: GoogleCloudPlatform/release-please-action@v2.5.5
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple
          bump-minor-pre-major: true

      # Standard build tasks
      - name: Build
        run:  make cross-platform
        env:
          PKGER: "./${{ steps.pkger-binaries.outputs.binary }}"

      - name: Lint
        run: make check
      - name: Permissions
        run: chmod a+x func_*amd*

      # Upload all build artifacts whether it's a release or not
      - uses: actions/upload-artifact@v2
        with:
          name: OSX Binary
          path: func_darwin_amd64
      - uses: actions/upload-artifact@v2
        with:
          name: Linux Binary
          path: func_linux_amd64
      - uses: actions/upload-artifact@v2
        with:
          name: Windows Binary
          path: func_windows_amd64.exe

      # Build and push a latest image with each commit
      - name: Image
        run:  make image
      - name: Push Image
        env:
          USER: ${{ secrets.QUAY_USER }}
          PASS: ${{ secrets.QUAY_TOKEN }}
        run: |
          docker login -u "$USER" -p "$PASS" quay.io
          make push && make latest

      # The following steps are only executed if this is a release
      - name: Compress Binaries
        if: ${{ steps.release.outputs.release_created }}
        run: gzip func_darwin_amd64 func_linux_amd64 func_windows_amd64.exe

      # Upload all binaries
      - name: Upload Darwin Binary
        uses: actions/upload-release-asset@v1
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./func_darwin_amd64.gz
          asset_name: func_darwin_amd64.gz
          asset_content_type: application/x-gzip
      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./func_linux_amd64.gz
          asset_name: func_linux_amd64.gz
          asset_content_type: application/x-gzip
      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./func_windows_amd64.exe.gz
          asset_name: func_windows_amd64.exe.gz
          asset_content_type: application/x-gzip
